<?php
/**
 * @file
 * Main file for the Commerce Stock Reserve module.
 */

/**
 * Implements hook_entity_delete().
 */
function commerce_stock_reserve_entity_delete($entity, $type) {
  // Release reserved stock when a line item is deleted.
  if ($type == 'commerce_line_item') {
    commerce_stock_reserve($entity, TRUE);
  }
  // Delete reserved stock when a product is deleted.
  elseif ($type == 'commerce_product') {
    db_delete('commerce_stock_reserve')
      ->condition('product_id', $entity->product_id)
      ->execute();
  }
}

/**
 * Get the stock amount that has been reserved for a line item.
 *
 * @param object $line_item
 *   The Commerce line item object.
 *
 * @return string|int
 *   The amount that has been reserved.
 */
function commerce_stock_reserve_get_amount($line_item) {
  // Only act on product line item types.
  if (!in_array($line_item->type, commerce_product_line_item_types())) {
    return 0;
  }
  $amount = db_select('commerce_stock_reserve', 'csr')
    ->fields('csr', array('amount'))
    ->condition('line_item_id', $line_item->line_item_id)
    ->execute()
    ->fetchField();
  return $amount ? $amount : 0;
}

/**
 * Reserve stock for a line item.
 *
 * @param object $line_item
 *   The Commerce line item object.
 * @param bool $release
 *   Whether to release stock rather than reserving it (default: FALSE).
 * @param bool $restore_to_product
 *   Whether to restore the stock to the product when it has been released
 *   (default: TRUE). This only has an effect if $release is TRUE.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function commerce_stock_reserve($line_item, $release = FALSE, $restore_to_product = TRUE) {
  // Only act on product line item types.
  if (!in_array($line_item->type, commerce_product_line_item_types()) || empty($line_item->commerce_product)) {
    return FALSE;
  }

  // Get the product from the line item.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $product_wrapper = $line_item_wrapper->commerce_product;
  $product = $product_wrapper->value();

  // Check that the product is enabled for stock management.
  if (!$product->product_id || !commerce_ss_product_type_enabled($product->type)) {
    return FALSE;
  }

  // Check that there is a stock field.
  if (!isset($product->commerce_stock)) {
    throw new Exception('The product does not have a commerce_stock field');
  }

  // Find out how much stock has been reserved for the line item.
  $current_reserved = commerce_stock_reserve_get_amount($line_item);
  if ($release && !$current_reserved) {
    // There is no stock to release.
    return TRUE;
  }

  // Get the current stock level.
  $current_stock = $product_wrapper->commerce_stock->value();

  // Calculate how much stock should be reserved. If releasing stock, then this
  // will be a negative value.
  $to_reserve = $release ? -$current_reserved : $line_item->quantity;

  // If the stock is already reserved, there is nothing to do.
  if ($to_reserve == $current_reserved) {
    return TRUE;
  }
  // If there isn't enough stock available for what has been requested, then
  // reset the line item's quantity to the maximum available and log a warning.
  elseif ($to_reserve > $current_stock + $current_reserved) {
    $available = $current_stock + $current_reserved;
    $line_item->quantity = $available;
    $line_item_wrapper->save();
    $to_reserve = $available;
    watchdog('commerce_stock_reserve', 'Quantity reset (@requested requested, @available available) for line item @line_item in order @order (product @sku)', array(
      '@requested' => $to_reserve,
      '@available' => $available,
      '@line_item' => $line_item->line_item_id,
      '@order' => $line_item->order_id,
      '@sku' => $product->sku,
    ), WATCHDOG_WARNING);
  }

  // Calculate the new stock values.
  $new_stock = $current_stock - $to_reserve;
  if (!$release) {
    $new_stock += $current_reserved;
  }

  // Save the product's new stock value and update the reserved stock.
  $transaction = db_transaction(__FUNCTION__);
  if (!$release || $restore_to_product) {
    $product_wrapper->commerce_stock->set($new_stock);
    $result = $product_wrapper->save();
    if (!$result) {
      throw new Exception('Failed to save product ' . $product->sku);
    }
  }
  if ($to_reserve > 0) {
    $key = array(
      'line_item_id' => $line_item->line_item_id,
      'product_id' => $product->product_id,
    );
    db_merge('commerce_stock_reserve')
      ->key($key)
      ->insertFields($key + array('created' => REQUEST_TIME))
      ->fields(array(
        'amount' => $to_reserve,
        'changed' => REQUEST_TIME,
      ))
      ->execute();
  }
  else {
    // If the reserved stock level is now 0, delete the rows.
    db_delete('commerce_stock_reserve')
      ->condition('line_item_id', $line_item->line_item_id)
      ->execute();
  }
  return TRUE;
}
